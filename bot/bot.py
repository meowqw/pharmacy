import aiogram.utils.markdown as md
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
import settings
from barcode import get_code
from db import DB


# bot init
bot = Bot(token=settings.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Goods(StatesGroup):
    code = State()
    data = State()

class Review(StatesGroup):
    data = State()
    good_id = State()
    review_text = State()
    rating = State()


# KEYBOARD
pharmacy = types.KeyboardButton('‚ûï –ê–ø—Ç–µ–∫–∏')
search = types.KeyboardButton('üîé –¢–æ–≤–∞—Ä—ã')
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(search)
keyboard.add(pharmacy)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    """START HANDLING"""
    await bot.send_message(message.chat.id, '–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É.', reply_markup=keyboard)

    # save user data to base
    try:
        data = {'id': message.chat.id, 'login': message.chat.username,
                'username': message.chat.first_name}
        DB().add_user(data)
    except Exception as e:
        await bot.send_message(message.chat.id, e)


@dp.message_handler()
async def message_text_controller(message: types.Message):
    """TEXT Controller"""

    # pharmacy btn
    if message.text == '‚ûï –ê–ø—Ç–µ–∫–∏':
        for pharmacy in DB().get_all_pharmacy():
            await bot.send_message(message.chat.id, f"""üÖ∞ {pharmacy[1]}\n–ê–¥—Ä–µ—Å: {pharmacy[2]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {pharmacy[3]}\n–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {pharmacy[4]}""")

    # search btn
    if message.text == 'üîé –¢–æ–≤–∞—Ä—ã':

        title_search = types.InlineKeyboardButton(
            'üîº –ù–∞–∑–≤–∞–Ω–∏–µ ', callback_data='title_search')
        barcode_search = types.InlineKeyboardButton(
            'üîΩ –í–≤–æ–¥ —à—Ä–∏—Ö–∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é ', callback_data='barcode_search')

        keyboard = types.InlineKeyboardMarkup().add(title_search).add(barcode_search)

        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: ', reply_markup=keyboard)



# SEARCH HANDLING
@dp.callback_query_handler(lambda call: call.data == 'title_search')
async def callback_search_title(callback_query: types.CallbackQuery):
    """Title"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å.')

    await Goods.data.set()

@dp.message_handler(content_types=['photo'])
async def barcode_img(message):
    img_id = message.photo[-1]['file_unique_id']
    await message.photo[-1].download(f"{settings.IMG_BAR}{img_id}.jpg")
    await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
    result = get_code(img_id)
    result = DB().get_good_by_id(result)
     # output info
    if result != None:
        try:
            data_result = result[0]
            barcode = data_result[0]
            title = data_result[1]
            manufacturer = data_result[2]
            img = settings.IMG_PATH + data_result[3]
            info = data_result[4]
            price = data_result[5]
            if data_result[6] == 1:
                leave_condition = '–î–∞'
            else:
                leave_condition = '–ù–µ—Ç'

            # good menu keuboard
            available_check = types.InlineKeyboardButton('‚ùì –ù–∞–ª–∏—á–∏–µ', callback_data=f'available_check_{barcode}')
            reviews_view = types.InlineKeyboardButton('üìã –û—Ç–∑—ã–≤—ã', callback_data=f'reviews_view_{barcode}')
            reviews_write = types.InlineKeyboardButton('‚úè –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data=f'reviews_write_{barcode}')

            keyboard = types.InlineKeyboardMarkup().add(available_check).add(reviews_view).add(reviews_write)
            await bot.send_photo(message.chat.id, photo=open(img, 'rb'), caption=f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title} " +
                                                                                f"\n*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:* {manufacturer}\n" + 
                                                                                f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {info}\n\n" + 
                                                                                f"*üí∑ –¶–µ–Ω–∞:* {price} —Ä—É–±\n" + 
                                                                                f"*–û—Ç–ø—É—Å–∫ –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞:* {leave_condition}\n" + 
                                                                                f"*–®—Ç—Ä–∏—Ö–∫–æ–¥:* {barcode}", parse_mode="Markdown", reply_markup=keyboard)
        except Exception as e:
            await bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ üòû')
    
    else:
        await bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ üòû')


# SEARCH HANDLING
@dp.callback_query_handler(lambda call: call.data == 'barcode_search')
async def callback_search_barcode(callback_query: types.CallbackQuery):
    """Barcode"""

    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥.')

    await Goods.data.set()


@dp.message_handler(state=Goods.data)
async def search_title(message: types.Message, state: FSMContext):
    """ Search title """

    async with state.proxy() as data:
        result = DB().get_good_by_title(message.text)
        if len(result) == 0:
            result = DB().get_good_by_id(message.text)
            
        # output info
        if len(result):
            try:
                data_result = result[0]
                barcode = data_result[0]
                title = data_result[1]
                manufacturer = data_result[2]
                img = settings.IMG_PATH + data_result[3]
                info = data_result[4]
                price = data_result[5]
                if data_result[6] == 1:
                    leave_condition = '–î–∞'
                else:
                    leave_condition = '–ù–µ—Ç'

                # good menu keuboard
                available_check = types.InlineKeyboardButton('‚ùì –ù–∞–ª–∏—á–∏–µ', callback_data=f'available_check_{barcode}')
                reviews_view = types.InlineKeyboardButton('üìã –û—Ç–∑—ã–≤—ã', callback_data=f'reviews_view_{barcode}')
                reviews_write = types.InlineKeyboardButton('‚úè –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', callback_data=f'reviews_write_{barcode}')

                keyboard = types.InlineKeyboardMarkup().add(available_check).add(reviews_view).add(reviews_write)
                await bot.send_photo(message.chat.id, photo=open(img, 'rb'), caption=f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title} " +
                                                                                    f"\n*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:* {manufacturer}\n" + 
                                                                                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {info}\n\n" + 
                                                                                    f"*üí∑ –¶–µ–Ω–∞:* {price} —Ä—É–±\n" + 
                                                                                    f"*–û—Ç–ø—É—Å–∫ –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞:* {leave_condition}\n" + 
                                                                                    f"*–®—Ç—Ä–∏—Ö–∫–æ–¥:* {barcode}", parse_mode="Markdown", reply_markup=keyboard)
            except Exception as e:
                await bot.send_message(message.chat.id, '–Ø –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä, –Ω–æ –≤–∞–º –µ–≥–æ –Ω–µ –ø–æ–∫–∞–∂—É üòû')
        
        else:
            await bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ üòû')

        await state.finish()

# MENU Goods

# available check
@dp.callback_query_handler(lambda call: 'available_check' in call.data)
async def callback_available_check(callback_query: types.CallbackQuery):

    id_ = callback_query.data.split('_')[-1]
    pharmacy = DB().get_pharmacy_available_by_id(id_)
    if len(pharmacy) > 0:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏ –≤: ')
        for i in pharmacy:
            await bot.send_message(callback_query.from_user.id, f'‚úÖ {i[1]}\n–ê–¥—Ä–µ—Å: {i[2]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {i[3]}\n–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {i[4]}')
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç üòû')
    

# reviews write
@dp.callback_query_handler(lambda call: 'reviews_write' in call.data)
async def callback_reviews_write(callback_query: types.CallbackQuery, state: FSMContext):

    async with state.proxy() as data:
        id_ = callback_query.data.split('_')[-1]
        await state.update_data(good_id=str(id_))

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.')
    # await state.finish()
    await Review.review_text.set()

@dp.message_handler(state=Review.review_text)
async def reviews_write(message: types.Message, state: FSMContext):
    """ Review write text """
    async with state.proxy() as data:
        await state.update_data(review_text=str(message.text))
        await bot.send_message(message.chat.id, '‚≠ï –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É —Ç–æ–≤–∞—Ä—É (0-10).')
        await Review.rating.set()
        # await Review.next()

@dp.message_handler(state=Review.rating)
async def reviews_write_rating(message: types.Message, state: FSMContext):
    """ Review write rating """
    async with state.proxy() as data:
        # print(Review.good_id)
        # print(Review.review_text)
        # print(message.text)
        try:
            data_ = {'id_user': message.chat.id, 'id_good': str(data['good_id']), 'text': str(data['review_text']), 'rating': int(message.text)}
            DB().add_review(data_)
            await bot.send_message(message.chat.id, '–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω üóí')
        except Exception as e:
            print(e)
            await bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ üòû')

        await state.finish() 

       

        
# reviews view
@dp.callback_query_handler(lambda call: 'reviews_view' in call.data)
async def callback_reviews_view(callback_query: types.CallbackQuery):

    id_ = callback_query.data.split('_')[-1]
    data = DB().get_reviews_by_id(id_)
    if len(data) > 0:
        average_score = sum([i[-1] for i in data]) / len(data)
        await bot.send_message(callback_query.from_user.id, f'üèÜ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {average_score} / 10')

        for n, i in enumerate(data):
            await bot.send_message(callback_query.from_user.id, f'üóí –û—Ç–∑—ã–≤ ‚Ññ {n+1}\n*–¢–µ–∫—Å—Ç:* {i[2]}\n*–û—Ü–µ–Ω–∫–∞*: {i[-1]}', parse_mode="Markdown")

    else:
        await bot.send_message(callback_query.from_user.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ üòû")

def start():
    executor.start_polling(dp, skip_updates=True)
